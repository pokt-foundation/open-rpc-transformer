{"openapi": "3.0.0", "info": {"title": "Ethereum JSON-RPC Specification", "description": "A specification of the standard interface for Ethereum clients.", "license": {"name": "CC0-1.0", "url": "https://creativecommons.org/publicdomain/zero/1.0/legalcode"}, "version": "0.0.0"}, "paths": {"/eth_getBlockByHash": {"post": {"summary": "Returns information about a block by hash.", "responses": {"200": {"description": "Block information", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns information about a block by hash.", "params": [], "id": 1}}}, "description": "Block hash"}}}, "/eth_getBlockByNumber": {"post": {"summary": "Returns information about a block by number.", "responses": {"200": {"description": "Block information", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns information about a block by number.", "params": [], "id": 1}}}, "description": "Block"}}}, "/eth_getBlockTransactionCountByHash": {"post": {"summary": "Returns the number of transactions in a block from a block matching the given block hash.", "responses": {"200": {"description": "Transaction count", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the number of transactions in a block from a block matching the given block hash.", "params": [], "id": 1}}}, "description": "Block hash"}}}, "/eth_getBlockTransactionCountByNumber": {"post": {"summary": "Returns the number of transactions in a block matching the given block number.", "responses": {"200": {"description": "Transaction count", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the number of transactions in a block matching the given block number.", "params": [], "id": 1}}}, "description": "Block"}}}, "/eth_getUncleCountByBlockHash": {"post": {"summary": "Returns the number of uncles in a block from a block matching the given block hash.", "responses": {"200": {"description": "Uncle count", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the number of uncles in a block from a block matching the given block hash.", "params": [], "id": 1}}}, "description": "Block hash"}}}, "/eth_getUncleCountByBlockNumber": {"post": {"summary": "Returns the number of transactions in a block matching the given block number.", "responses": {"200": {"description": "Uncle count", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the number of transactions in a block matching the given block number.", "params": [], "id": 1}}}, "description": "Block"}}}, "/eth_chainId": {"post": {"summary": "Returns the chain ID of the current network.", "responses": {"200": {"description": "Chain ID", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the chain ID of the current network.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_syncing": {"post": {"summary": "Returns an object with data about the sync status or false.", "responses": {"200": {"description": "Syncing status", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns an object with data about the sync status or false.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_coinbase": {"post": {"summary": "Returns the client coinbase address.", "responses": {"200": {"description": "Coinbase address", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the client coinbase address.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_accounts": {"post": {"summary": "Returns a list of addresses owned by client.", "responses": {"200": {"description": "Accounts", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns a list of addresses owned by client.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_blockNumber": {"post": {"summary": "Returns the number of most recent block.", "responses": {"200": {"description": "Block number", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the number of most recent block.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_call": {"post": {"summary": "Executes a new message call immediately without creating a transaction on the block chain.", "responses": {"200": {"description": "Return data", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Executes a new message call immediately without creating a transaction on the block chain.", "params": [], "id": 1}}}, "description": "Transaction"}}}, "/eth_estimateGas": {"post": {"summary": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.", "responses": {"200": {"description": "Gas used", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.", "params": [], "id": 1}}}, "description": "Transaction"}}}, "/eth_createAccessList": {"post": {"summary": "Generates an access list for a transaction.", "responses": {"200": {"description": "Gas used", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Generates an access list for a transaction.", "params": [], "id": 1}}}, "description": "Transaction"}}}, "/eth_gasPrice": {"post": {"summary": "Returns the current price per gas in wei.", "responses": {"200": {"description": "Gas price", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the current price per gas in wei.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_maxPriorityFeePerGas": {"post": {"summary": "Returns the current maxPriorityFeePerGas per gas in wei.", "responses": {"200": {"description": "Max priority fee per gas", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the current maxPriorityFeePerGas per gas in wei.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_feeHistory": {"post": {"summary": "Transaction fee history", "responses": {"200": {"description": "feeHistoryResult", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Transaction fee history", "params": [], "id": 1}}}, "description": "blockCount"}}}, "/eth_newFilter": {"post": {"summary": "Creates a filter object, based on filter options, to notify when the state changes (logs).", "responses": {"200": {"description": "Filter Identifier", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Creates a filter object, based on filter options, to notify when the state changes (logs).", "params": [], "id": 1}}}, "description": "Filter"}}}, "/eth_newBlockFilter": {"post": {"summary": "Creates a filter in the node, to notify when a new block arrives.", "responses": {"200": {"description": "Filter Identifier", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Creates a filter in the node, to notify when a new block arrives.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_newPendingTransactionFilter": {"post": {"summary": "Creates a filter in the node, to notify when new pending transactions arrive.", "responses": {"200": {"description": "Filter Identifier", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Creates a filter in the node, to notify when new pending transactions arrive.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_uninstallFilter": {"post": {"summary": "Uninstalls a filter with given id.", "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Uninstalls a filter with given id.", "params": [], "id": 1}}}, "description": "Filter Identifier"}}}, "/eth_getFilterChanges": {"post": {"summary": "Polling method for a filter, which returns an array of logs which occurred since last poll.", "responses": {"200": {"description": "Log objects", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Polling method for a filter, which returns an array of logs which occurred since last poll.", "params": [], "id": 1}}}, "description": "Filter Identifier"}}}, "/eth_getFilterLogs": {"post": {"summary": "Returns an array of all logs matching filter with given id.", "responses": {"200": {"description": "Log objects", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns an array of all logs matching filter with given id.", "params": [], "id": 1}}}, "description": "Filter Identifier"}}}, "/eth_getLogs": {"post": {"summary": "Returns an array of all logs matching filter with given id.", "responses": {"200": {"description": "Log objects", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns an array of all logs matching filter with given id.", "params": [], "id": 1}}}, "description": "Filter"}}}, "/eth_mining": {"post": {"summary": "Returns whether the client is actively mining new blocks.", "responses": {"200": {"description": "Mining status", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns whether the client is actively mining new blocks.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_hashrate": {"post": {"summary": "Returns the number of hashes per second that the node is mining with.", "responses": {"200": {"description": "Mining status", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the number of hashes per second that the node is mining with.", "params": [], "id": 1}}}, "description": ""}}}, "/eth_getWork": {"post": {"summary": "Returns the hash of the current block, the seedHash, and the boundary condition to be met (\u201ctarget\u201d).", "responses": {"200": {"description": "Current work", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the hash of the current block, the seedHash, and the boundary condition to be met (\u201ctarget\u201d).", "params": [], "id": 1}}}, "description": ""}}}, "/eth_submitWork": {"post": {"summary": "Used for submitting a proof-of-work solution.", "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Used for submitting a proof-of-work solution.", "params": [], "id": 1}}}, "description": "nonce"}}}, "/eth_submitHashrate": {"post": {"summary": "Used for submitting mining hashrate.", "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Used for submitting mining hashrate.", "params": [], "id": 1}}}, "description": "Hashrate"}}}, "/eth_sign": {"post": {"summary": "Returns an EIP-191 signature over the provided data.", "responses": {"200": {"description": "Signature", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns an EIP-191 signature over the provided data.", "params": [], "id": 1}}}, "description": "Address"}}}, "/eth_signTransaction": {"post": {"summary": "Returns an RLP encoded transaction signed by the specified account.", "responses": {"200": {"description": "Encoded transaction", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns an RLP encoded transaction signed by the specified account.", "params": [], "id": 1}}}, "description": "Transaction"}}}, "/eth_getBalance": {"post": {"summary": "Returns the balance of the account of given address.", "responses": {"200": {"description": "Balance", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the balance of the account of given address.", "params": [], "id": 1}}}, "description": "Address"}}}, "/eth_getStorageAt": {"post": {"summary": "Returns the value from a storage position at a given address.", "responses": {"200": {"description": "Value", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the value from a storage position at a given address.", "params": [], "id": 1}}}, "description": "Address"}}}, "/eth_getTransactionCount": {"post": {"summary": "Returns the number of transactions sent from an address.", "responses": {"200": {"description": "Transaction count", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the number of transactions sent from an address.", "params": [], "id": 1}}}, "description": "Address"}}}, "/eth_getCode": {"post": {"summary": "Returns code at a given address.", "responses": {"200": {"description": "Bytecode", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns code at a given address.", "params": [], "id": 1}}}, "description": "Address"}}}, "/eth_getProof": {"post": {"summary": "Returns the merkle proof for a given account and optionally some storage keys.", "responses": {"200": {"description": "Account", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the merkle proof for a given account and optionally some storage keys.", "params": [], "id": 1}}}, "description": "Address"}}}, "/eth_sendTransaction": {"post": {"summary": "Signs and submits a transaction.", "responses": {"200": {"description": "Transaction hash", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Signs and submits a transaction.", "params": [], "id": 1}}}, "description": "Transaction"}}}, "/eth_sendRawTransaction": {"post": {"summary": "Submits a raw transaction.", "responses": {"200": {"description": "Transaction hash", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Submits a raw transaction.", "params": [], "id": 1}}}, "description": "Transaction"}}}, "/eth_getTransactionByHash": {"post": {"summary": "Returns the information about a transaction requested by transaction hash.", "responses": {"200": {"description": "Transaction information", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the information about a transaction requested by transaction hash.", "params": [], "id": 1}}}, "description": "Transaction hash"}}}, "/eth_getTransactionByBlockHashAndIndex": {"post": {"summary": "Returns information about a transaction by block hash and transaction index position.", "responses": {"200": {"description": "Transaction information", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns information about a transaction by block hash and transaction index position.", "params": [], "id": 1}}}, "description": "Block hash"}}}, "/eth_getTransactionByBlockNumberAndIndex": {"post": {"summary": "Returns information about a transaction by block number and transaction index position.", "responses": {"200": {"description": "Transaction information", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns information about a transaction by block number and transaction index position.", "params": [], "id": 1}}}, "description": "Block"}}}, "/eth_getTransactionReceipt": {"post": {"summary": "Returns the receipt of a transaction by transaction hash.", "responses": {"200": {"description": "Receipt Information", "content": {"application/json": {"schema": {}}}}}, "requestBody": {"required": false, "content": {"application/json": {"schema": {}, "example": {"jsonrpc": "2.0", "method": "Returns the receipt of a transaction by transaction hash.", "params": [], "id": 1}}}, "description": "Transaction hash"}}}}}